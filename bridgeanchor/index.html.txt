<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BridgeAnchor - AI Companion</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh; display: flex; justify-content: center; align-items: center; padding: 20px;
        }
        .chat-container {
            background: white; border-radius: 20px; box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            width: 100%; max-width: 900px; height: 700px; display: flex; flex-direction: column; overflow: hidden;
        }
        .chat-header {
            background: linear-gradient(90deg, #4CAF50, #45a049); color: white; padding: 25px; text-align: center; position: relative;
        }
        .chat-header h1 { font-size: 28px; margin-bottom: 8px; }
        .chat-header p { font-size: 16px; opacity: 0.9; }
        .api-status {
            position: absolute; top: 20px; right: 20px; padding: 8px 15px; border-radius: 15px;
            font-size: 12px; background: rgba(76, 175, 80, 0.8); color: white;
        }
        .chat-messages { flex: 1; padding: 20px; overflow-y: auto; background: #f8f9fa; }
        .message { margin-bottom: 20px; display: flex; align-items: flex-start; animation: slideIn 0.3s ease-out; }
        @keyframes slideIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        .message.user { flex-direction: row-reverse; }
        .message-avatar {
            width: 45px; height: 45px; border-radius: 50%; display: flex; align-items: center; justify-content: center;
            font-weight: bold; color: white; margin: 0 12px; flex-shrink: 0; font-size: 14px;
        }
        .message.user .message-avatar { background: #667eea; }
        .message.assistant .message-avatar { background: #4CAF50; }
        .message-content {
            max-width: 70%; padding: 16px 20px; border-radius: 18px; line-height: 1.6; font-size: 15px;
        }
        .message.user .message-content { background: #667eea; color: white; border-bottom-right-radius: 5px; }
        .message.assistant .message-content { background: white; border: 1px solid #e1e5e9; border-bottom-left-radius: 5px; }
        .typing-indicator {
            display: none; padding: 16px 20px; margin: 10px 57px 10px 0; background: white;
            border: 1px solid #e1e5e9; border-radius: 18px; border-bottom-left-radius: 5px;
        }
        .typing-dots { display: flex; gap: 4px; }
        .typing-dots span {
            width: 8px; height: 8px; border-radius: 50%; background: #4CAF50; animation: typing 1.4s infinite ease-in-out;
        }
        .typing-dots span:nth-child(2) { animation-delay: 0.2s; }
        .typing-dots span:nth-child(3) { animation-delay: 0.4s; }
        @keyframes typing { 0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; } 40% { transform: scale(1); opacity: 1; } }
        .chat-input-container { padding: 20px; border-top: 1px solid #e1e5e9; background: white; }
        .chat-input-row { display: flex; gap: 12px; align-items: center; }
        .chat-input {
            flex: 1; padding: 14px 18px; border: 2px solid #e1e5e9; border-radius: 25px;
            font-size: 16px; outline: none; transition: border-color 0.3s; resize: none; max-height: 100px;
        }
        .chat-input:focus { border-color: #4CAF50; }
        .send-btn {
            width: 50px; height: 50px; border-radius: 50%; border: none; background: #4CAF50; color: white;
            cursor: pointer; display: flex; align-items: center; justify-content: center; font-size: 20px; transition: transform 0.2s;
        }
        .send-btn:hover:not(:disabled) { transform: scale(1.05); }
        .welcome-message { text-align: center; color: #666; padding: 40px 20px; font-style: italic; line-height: 1.6; }
        .error-message { background: #ffebee; color: #c62828; padding: 15px; border-radius: 10px; margin: 10px 0; border: 1px solid #ffcdd2; }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h1>BridgeAnchor</h1>
            <p>Your compassionate AI companion</p>
            <div class="api-status">Ready ✓</div>
        </div>
        
        <div class="chat-messages" id="chatMessages">
            <div class="welcome-message">
                <p><strong>Hello! I'm BridgeAnchor.</strong></p>
                <p>I'm here to support you with warmth and respect. How would you like to start our conversation today?</p>
            </div>
        </div>
        
        <div class="typing-indicator" id="typingIndicator">
            <div class="typing-dots"><span></span><span></span><span></span></div>
        </div>
        
        <div class="chat-input-container">
            <div class="chat-input-row">
                <textarea class="chat-input" id="chatInput" placeholder="Share what's on your mind..." rows="1"></textarea>
                <button class="send-btn" id="sendBtn">➤</button>
            </div>
        </div>
    </div>

    <script>
        class BridgeAnchorChat {
            constructor() {
                this.chatMessages = document.getElementById('chatMessages');
                this.chatInput = document.getElementById('chatInput');
                this.sendBtn = document.getElementById('sendBtn');
                this.typingIndicator = document.getElementById('typingIndicator');
                // CHANGED: Railway uses /api/chat instead of /.netlify/functions/chat
                this.apiUrl = '/api/chat';
                this.conversation = [];
                this.initializeEventListeners();
                this.setupAutoResize();
            }

            initializeEventListeners() {
                this.sendBtn.addEventListener('click', () => this.sendMessage());
                this.chatInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault(); this.sendMessage();
                    }
                });
            }

            setupAutoResize() {
                this.chatInput.addEventListener('input', () => {
                    this.chatInput.style.height = 'auto';
                    this.chatInput.style.height = Math.min(this.chatInput.scrollHeight, 100) + 'px';
                });
            }

            async sendMessage() {
                const message = this.chatInput.value.trim();
                if (!message) return;
                
                this.addMessage('user', message);
                this.conversation.push({ role: 'user', content: message });
                this.chatInput.value = '';
                this.chatInput.style.height = 'auto';
                this.showTypingIndicator();

                try {
                    const response = await fetch(this.apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ messages: this.conversation.slice(-10) })
                    });
                    
                    if (!response.ok) throw new Error(`HTTP ${response.status}`);
                    
                    const data = await response.json();
                    this.hideTypingIndicator();
                    this.addMessage('assistant', data.message);
                    this.conversation.push({ role: 'assistant', content: data.message });
                } catch (error) {
                    this.hideTypingIndicator();
                    this.showError('I\'m having trouble connecting right now. Could you try that again?');
                    console.error('API Error:', error);
                }
            }

            addMessage(sender, text) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${sender}`;
                
                const avatar = document.createElement('div');
                avatar.className = 'message-avatar';
                avatar.textContent = sender === 'user' ? 'You' : 'BA';
                
                const content = document.createElement('div');
                content.className = 'message-content';
                content.textContent = text;
                
                messageDiv.appendChild(avatar);
                messageDiv.appendChild(content);
                
                const welcomeMsg = this.chatMessages.querySelector('.welcome-message');
                if (welcomeMsg && sender === 'user') welcomeMsg.remove();
                
                this.chatMessages.appendChild(messageDiv);
                this.scrollToBottom();
            }

            showError(message) {
                const errorDiv = document.createElement('div');
                errorDiv.className = 'error-message';
                errorDiv.textContent = message;
                this.chatMessages.appendChild(errorDiv);
                this.scrollToBottom();
                setTimeout(() => errorDiv.remove(), 5000);
            }

            showTypingIndicator() {
                this.typingIndicator.style.display = 'block';
                this.scrollToBottom();
            }

            hideTypingIndicator() {
                this.typingIndicator.style.display = 'none';
            }

            scrollToBottom() {
                setTimeout(() => {
                    this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
                }, 100);
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            new BridgeAnchorChat();
        });
    </script>
</body>
</html>